-- TODO: DAP
-- "http://github.com/mfussenegger/nvim-dap",
-- { "http://github.com/rcarriga/nvim-dap-ui", dependencies = { "nvim-neotest/nvim-nio" } },
-- "http://github.com/theHamsta/nvim-dap-virtual-text",
-- "http://github.com/jay-babu/mason-nvim-dap.nvim",

-- local dap_status_ok, dap = pcall(require, "dap")
-- if not dap_status_ok then
--   return
-- end
--
-- local dap_ui_status_ok, dapui = pcall(require, "dapui")
-- if not dap_ui_status_ok then
--   return
-- end
--
-- -- DapBreakpoint for breakpoints (default: B)
-- -- DapBreakpointCondition for conditional breakpoints (default: C)
-- -- DapLogPoint for log points (default: L)
-- -- DapStopped to indicate where the debugee is stopped (default: →)
-- -- DapBreakpointRejected to indicate breakpoints rejected by the debug adapter (default: R)
--
-- vim.cmd("hi DapSign guifg=#fa4848")
-- vim.fn.sign_define("DapBreakpoint", { text = "", texthl = "DapSign" })
-- vim.fn.sign_define("DapBreakpointCondition", { text = "", texthl = "DapSign" })
-- vim.fn.sign_define("DapLogPoint", { text = "", texthl = "DapSign" })
-- -- vim.fn.sign_define("DapStopped", { })
-- vim.fn.sign_define("DapBreakpointRejected", { text = "", texthl = "DapSign" })
--
-- dapui.setup()
--
-- key("n", "<space>b", dap.toggle_breakpoint)
--
-- key("n", "<space>lb", function()
--   dap.set_breakpoint(vim.fn.input("Break point condition: "), nil, nil)
-- end)
-- key("n", "<space>hb", function()
--   dap.set_breakpoint(nil, vim.fn.input("Hit condition: "), nil)
-- end)
-- key("n", "<Leader>ib", function()
--   dap.set_breakpoint(nil, nil, vim.fn.input("Log point message: "))
-- end)
--
-- key("n", "<space>gb", dap.run_to_cursor)
--
-- key("n", "<space>pb", function()
--   dapui.eval(nil, { enter = true })
-- end)
--
-- -- Down: Step over
-- -- Right: Step into
-- -- Left: Step out
-- -- Up: Restart frame
--
-- key("n", "<F1>", dap.continue)
--
-- key("n", "<F2>", dap.step_into)
-- key("n", "<C-Right>", dap.step_into)
--
-- key("n", "<F3>", dap.step_over)
-- key("n", "<C-Down>", dap.step_over)
--
-- key("n", "<F4>", dap.step_out)
-- key("n", "<C-Left>", dap.step_out)
--
-- key("n", "<F5>", dap.step_back)
--
-- key("n", "<F12>", dap.restart)
-- key("n", "<C-Up>", dap.restart)
--
-- dap.listeners.before.attach.dapui_config = function()
--   dapui.open()
-- end
--
-- dap.listeners.before.launch.dapui_config = function()
--   dapui.open()
-- end
--
-- dap.listeners.before.event_terminated.dapui_config = function()
--   dapui.close()
-- end
--
-- dap.listeners.before.event_exited.dapui_config = function()
--   dapui.close()
-- end
--
-- -- Adapters
--
-- dap.adapters.godot = {
--   type = "server",
--   host = "127.0.0.1",
--   port = 6006,
-- }
--
-- dap.configurations.gdscript = {
--   {
--     type = "godot",
--     request = "launch",
--     name = "Launch scene",
--     project = "${workspaceFolder}",
--     launch_scene = true,
--   },
-- }

-- require("mason-nvim-dap").setup({
--   handlers = {
--     function(config)
--       require("mason-nvim-dap").default_setup(config)
--     end,
--   },
-- })

-- require("nvim-dap-virtual-text").setup({
--   only_first_definition = false,
--   all_references = true,
-- })

-- -- DAP
-- keymap("n", "<leader>db", "<cmd>lua require'dap'.toggle_breakpoint()<cr>", opts)
-- keymap("n", "<leader>dc", "<cmd>lua require'dap'.continue()<cr>", opts)
-- keymap("n", "<leader>di", "<cmd>lua require'dap'.step_into()<cr>", opts)
-- keymap("n", "<leader>do", "<cmd>lua require'dap'.step_over()<cr>", opts)
-- keymap("n", "<leader>dO", "<cmd>lua require'dap'.step_out()<cr>", opts)
-- keymap("n", "<leader>dr", "<cmd>lua require'dap'.repl.toggle()<cr>", opts)
-- keymap("n", "<leader>dl", "<cmd>lua require'dap'.run_last()<cr>", opts)
-- keymap("n", "<leader>du", "<cmd>lua require'dapui'.toggle()<cr>", opts)
-- keymap("n", "<leader>dt", "<cmd>lua require'dap'.terminate()<cr>", opts)
